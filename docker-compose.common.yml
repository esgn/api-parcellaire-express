version: "3.8"

#####
# ⭐️ This file is not independent :
## 🟢 Docker-compose DEV mode, starts with
# $ docker-compose -f docker-compose.common.yml -f docker-compose.dev.yml [build|up -d|down]
# OR
# $ docker-compose docker-compose.common.yml -f docker-compose.dev.yml config > docker-compose.yml
# $ docker-compose [build|up -d|down]
## 🟢 Docker-compose STACK mode, starts with
# $ docker login <registry_url>
# $ docker-compose -f docker-compose.common.yml -f docker-compose.stack.yml config > docker-stack.yml
# $ docker stack deploy parcellaire -c docker-stack.yml --with-registry-auth
#####


# 🪧 Some information on this file : 
# See : https://docs.docker.com/compose/compose-file/compose-file-v3/

services:
  parcellaire-importer:
    image: ${STACK_IMAGE_IMPORTER:-parcellaire-importer}
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
      - POSTGRES_HOST
      - POSTGRES_PORT
      - POSTGRES_SCHEMA
      - DOWNLOAD_URL
      - TEST_IMPORTER
      - MAX_PARALLEL_DL

  parcellaire-postgis:
    image: ${STACK_IMAGE_POSTGIS:-topo-postgis:latest}
    environment:
      - POSTGRES_DB
      - POSTGRES_PORT
      - POSTGRES_USER
      - POSTGRES_PASSWORD
    # Options de configuration issues de PGTune (https://pgtune.leopard.in.ua)
    # Valeurs par défaut pour une instance Hetzner CPX21
    command:
      - "postgres"
      - "-c"
      - "max_connections=100"
      - "-c"
      - "shared_buffers=1GB"
      - "-c"
      - "effective_cache_size=3GB"
      - "-c"
      - "maintenance_work_mem=256MB"
      - "-c"
      - "checkpoint_completion_target=0.9"
      - "-c"
      - "wal_buffers=16MB"
      - "-c"
      - "default_statistics_target=100"
      - "-c"
      - "random_page_cost=1.1"
      - "-c"
      - "effective_io_concurrency=200"
      - "-c"
      - "work_mem=2621kB"
      - "-c"
      - "min_wal_size=1GB"
      - "-c"
      - "max_wal_size=4GB"
      - "-c"
      - "max_worker_processes=4"
      - "-c"
      - "max_parallel_workers_per_gather=2"
      - "-c"
      - "max_parallel_workers=4"
      - "-c"
      - "max_parallel_maintenance_workers=2"
      # Pour logguer l'intégralité des requêtes effectuées sur la base
      # - "-c"
      # - "log_statement=all"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"]
      interval: 1m
      timeout: 5s
      retries: 5
      start_period: 10s

  parcellaire-api:
    image: ${STACK_IMAGE_API:-topo-api:latest}  
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
      - POSTGRES_HOST
      - POSTGRES_PORT
      - POSTGRES_SCHEMA
      - API_PORT
      - API_KEY
      - MAX_FEATURE
      - VIEWER_URL 
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --no-verbose --tries=1 --spider http://localhost:${API_PORT}/status || exit 1",
        ]
      interval: 1m
      timeout: 5s
      retries: 5
      start_period: 10s

